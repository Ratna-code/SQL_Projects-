Create database myntra
use myntra
CREATE TABLE transactions (
    cust_id INT,
    trans_id INT,
    trans_date DATE,
    invoice_nbr INT,
    loc_nbr INT,
    sales DECIMAL(10, 2),
    product_category VARCHAR(50),
    payment_method VARCHAR(50),
    payment_status VARCHAR(50)
);

select * from ad_conversion_data


-- CTR (Click-Through Rate):
-- Imagine you have a Myntra ad that many people see. CTR is like measuring how many people actually click on that ad to visit Myntra's website.
-- CTR= (Number of Clicks/Number of Impressions)×100%.
-- calculate CTR 
SELECT ad_id,ROUND(100*(SUM(clicks)/SUM(NULLIF(impressions,0))),2) AS CTR 
FROM ad_conversion_data
GROUP BY ad_id
ORDER BY CTR DESC LIMIT 5




-- Q.1 You as an analyst is working for fashion e-commerce platform : MYNTRA for the marketing team. 
-- Your analytics manager assigned you task to analyze performance of various advertising accounts over the last 3 months . Calculate ROAS (return on Ad Spend) for each advertiser across all the ad campaigns and CTR (click through rate for each advertiser)
-- ROAS (return on ad spend) is calculated by dividing the total revenue by the ad spend

-- ROAS is calculated by dividing the total revenue generated from the advertising campaign by the amount spent on that campaign.For example, 
-- if Myntra spends ₹1,000 on an ad campaign and generates ₹5,000 in revenue, the ROAS would be 5
--  ROAS = ( total revenue/Ad spent )

-- calculate ROAS with top 5 ad id
 
SELECT ad_id,ROUND(100*(SUM(clicks)/SUM(NULLIF(impressions,0))),3) AS CTR ,
ROUND(SUM(revenue)/SUM(NULLIF(spent,0)),2) AS ROAS 
FROM ad_conversion_data
GROUP BY ad_id
ORDER BY ROAS DESC LIMIT 5

-- Q.2 find the ad_id along with the maximum number of impressions and clicks each ad has received. 

SELECT ad_id, MAX(impressions) AS Impressions ,MAX(clicks) AS Clicks FROM  ad_conversion_data
GROUP BY ad_id
ORDER BY Impressions DESC LIMIT 5




-- Q.3 How many unique campaigns (xyz_campaign_id and fb_campaign_id) are present?

SELECT 
    COUNT(DISTINCT xyz_campaign_id) AS Count_of_xyz_campaign_id,
    COUNT(DISTINCT fb_campaign_id) AS Count_of_fb_campaign_id
FROM ad_conversion_data;




-- Q.4 What is the total revenue generated by each XYZ campaign (xyz_campaign_id)? List the campaigns in descending order based on revenue.
SELECT 
    xyz_campaign_id,
    SUM(revenue) AS Revenue 
FROM ad_conversion_data
GROUP BY xyz_campaign_id
ORDER BY Revenue DESC 





-- Q.5 What is the total revenue generated by each Facebook campaign (fb_campaign_id)? List the top 5 campaigns in descending order based on revenue.
SELECT
    fb_campaign_id,
    SUM(revenue) AS Revenue 
FROM ad_conversion_data
GROUP BY fb_campaign_id
ORDER BY Revenue DESC LIMIT 5




-- Q.6 How much impressions, clicks, ad spent, ROAS (Return on Ad Spend), and revenue did each Facebook campaign (fb_campaign_id) generate? List the top 5 campaigns by revenue.
SELECT 
    fb_campaign_id,SUM(impressions) AS Impressions ,SUM(clicks) AS Clicks,SUM(spent) AS ad_Spent, ROUND(SUM(revenue)/SUM(NULLIF(spent,0)),2) AS ROAS ,
    SUM(revenue) AS Revenue 
FROM ad_conversion_data
GROUP BY fb_campaign_id
ORDER BY Revenue DESC LIMIT 5




-- Q.7 What is the total Click-Through Rate (CTR) for each age group (age)?

SELECT 
	age,SUM(clicks) as Clicks , ROUND(100*(SUM(clicks)/SUM(NULLIF(impressions,0))),3) AS CTR
FROM ad_conversion_data
GROUP BY age
ORDER BY CTR DESC



-- Q.7 What is the total Click-Through Rate (CTR) for gender ?

SELECT 
	gender ,SUM(clicks) as Clicks , ROUND(100*(SUM(clicks)/SUM(NULLIF(impressions,0))),3) AS CTR
FROM ad_conversion_data
GROUP BY gender 
ORDER BY CTR DESC



-- Q.8 For each gender in the ad_conversion_data, provide the Click-Through Rate (CTR), 
-- Return on Ad Spend (ROAS), and the average amount spent on ads. Order the results by the average amount spent in descending order.
SELECT 
    gender,
    ROUND(100*(SUM(clicks)/SUM(NULLIF(impressions,0))),3) AS CTR,
    ROUND(SUM(revenue)/SUM(NULLIF(spent,0)),2) AS ROAS ,
    AVG(spent) AS "Average Ad Spent"
FROM ad_conversion_data
GROUP BY gender
ORDER BY AVG(spent) DESC;



-- Q.9  Calculate the Return on Ad Spend (ROAS) for each campaign.

SELECT 
    xyz_campaign_id,
    ROUND(SUM(revenue) / SUM(NULLIF(spent, 0)), 2) AS ROAS
FROM ad_conversion_data
GROUP BY xyz_campaign_id
ORDER BY xyz_campaign_id;



-- Q.10 Provide a detailed breakdown of Impressions, Clicks, Conversions, and Return on Ad Spend (ROAS) for each campaign (xyz_campaign_id).



SELECT 
    xyz_campaign_id,
    SUM(impressions) AS Impressions,
    SUM(clicks) AS Clicks,
    SUM(conversion) AS Conversions,
    ROUND(SUM(revenue) / SUM(NULLIF(spent, 0)), 2) AS ROAS
FROM ad_conversion_data
GROUP BY xyz_campaign_id
ORDER BY xyz_campaign_id;

CREATE TABLE ad_conversion_data (
    ad_id BIGINT,
    xyz_campaign_id INT,
    fb_campaign_id INT,
    age VARCHAR(10),
    gender VARCHAR(1),
    interest INT,
    Impressions INT,
    Clicks INT,
    Spent DECIMAL(10, 2),
    Conversion INT,
    Revenue DECIMAL(10, 2)
);


select * from transactions



-- Q.1 What is the total sales amount for each payment method?

SELECT  
	payment_method, SUM(sales) AS total_sales  FROM transactions
WHERE payment_status = 'completed'
GROUP BY payment_method
ORDER BY total_sales DESC



-- Q.2 How much sales revenue and how many transactions are there for each product category?

SELECT product_category, SUM(sales) AS total_sales, COUNT(trans_id) AS transaction_count
FROM transactions
GROUP BY product_category;
ORDER BY total_sales DESC



-- Q.3 What is the average sales amount per transaction for each product category?

SELECT product_category, round(AVG(sales),2) as Average_Sales 
FROM transactions
GROUP BY product_category;
ORDER BY Average_Sales DESC



-- Q.4 How many transactions are completed and failed for each payment status?

SELECT payment_status, COUNT(trans_id) AS transaction_count
FROM transactions
GROUP BY payment_status;


-- RFM Framework 

-- Myntra has a large dataset of customer transactions and wants to understand their customers' buying behavior to improve their customer targeting strategy. 
-- The dataset includes information such as purchase history, product categories, and transaction dates.Implement RFM framework RFM (Recency, Frequency, Monetary) analysis 
-- is a common technique used to segment customers based on their behavior. It helps businesses to identify high-value customers, optimize marketing campaigns, and improve customer retention.

CREATE TABLE order_details (
    customer_id VARCHAR(50),
    income INT,
    device_id INT,
    online_id INT,
    store_id INT,
    sku_code INT,
    item_id INT,
    item_desc VARCHAR(255),
    quantity_ordered INT,
    price_each INT,
    order_date DATETIME,
    payment_status VARCHAR(20),
    payment_mode VARCHAR(10),
    order_status VARCHAR(20)
);

select * from order_details



UPDATE order_details
SET online_id = NULL
WHERE online_id = 0

UPDATE order_details
SET device_id = NULL
WHERE device_id = 0

UPDATE order_details
SET store_id = NULL
WHERE store_id = 0





-- where does the customer come from ?
SELECT device_id AS DeviceID , online_id AS OnlineID, store_id AS storeID , COALESCE(store_id,device_id,online_id) AS unique_id FROM order_details

select * from order_details


-- recency (Todays Day - Customers Date of last purchase ) 


SELECT 
    customer_id, 
    DATEDIFF(CURDATE(), latest_order_date) as Recency 
FROM (
    SELECT 
        customer_id, 
        MAX(order_date) as latest_order_date
    FROM order_details
    GROUP BY customer_id
) AS latest_orders;

-- Frequency of each customer Id 
SELECT 
    customer_id, 
    COUNT(DISTINCT(COALESCE(store_id,device_id,online_id))) AS Frequency
FROM order_details
GROUP BY customer_id


-- Monetary 
SELECT customer_id, SUM(quantity_ordered* price_each) AS Monetary
FROM order_details
GROUP BY customer_id



-- RFM framework 
SELECT  customer_id, 
DATEDIFF(CURDATE(), MAX(order_date)) as Recency, 
COUNT(DISTINCT(COALESCE(store_id,device_id,online_id))) AS Frequency, 
SUM(quantity_ordered* price_each) AS Monetary
FROM order_details
GROUP BY customer_id










-- RFM Score 
WITH rfm_framework AS (
    SELECT
        customer_id,
        DATEDIFF(CURDATE(), MAX(order_date)) AS Recency,
        COUNT(DISTINCT COALESCE(store_id, device_id, online_id)) AS Frequency,
        SUM(quantity_ordered * price_each) AS Monetary
    FROM
        order_details
    GROUP BY
        customer_id
)

SELECT 
    customer_id, 
    NTILE(4) OVER (ORDER BY Recency) AS R_Score,
    NTILE(4) OVER (ORDER BY Frequency) AS F_Score,
    NTILE(4) OVER (ORDER BY Monetary) AS M_Score
FROM 
    rfm_framework;
    
    
    
    
    








-- Assign RFM scores and segment customers
WITH rfm_framework AS (
    SELECT
        customer_id,
        DATEDIFF(CURDATE(), MAX(order_date)) AS Recency,
        COUNT(DISTINCT COALESCE(store_id, device_id, online_id)) AS Frequency,
        SUM(quantity_ordered * price_each) AS Monetary
    FROM
        order_details
    GROUP BY
        customer_id
)

SELECT 
    customer_id, 
    R_Score,
    F_Score,
    M_Score,
    CONCAT(R_Score, M_Score, F_Score) AS RFM_Scores,
    CASE
        WHEN R_Score >= 3 AND F_Score >= 3 AND M_Score >= 3 THEN 'Champions'
        WHEN R_Score >= 3 AND F_Score >= 3 AND M_Score < 3 THEN 'Loyal Customers'
        WHEN R_Score < 3 AND F_Score < 3 AND M_Score >= 3 THEN 'Potential Loyalists'
        WHEN R_Score < 3 AND F_Score < 3 AND M_Score < 3 THEN 'Needs Attention'
        ELSE 'Other' -- Add an 'Other' category for any unexpected cases
    END AS RFM_Segment
FROM (
    SELECT 
        customer_id, 
        NTILE(4) OVER (ORDER BY Recency) AS R_Score,
        NTILE(4) OVER (ORDER BY Frequency) AS F_Score,
        NTILE(4) OVER (ORDER BY Monetary) AS M_Score
    FROM 
        rfm_framework
) AS subquery;

